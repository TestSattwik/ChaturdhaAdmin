{"ast":null,"code":"import React,{useEffect,useState}from'react';import TextField from'@mui/material/TextField';import FormControlLabel from'@mui/material/FormControlLabel';import{api}from\"../Api/Api\";import{Card,Stack,Button,Checkbox,Container,Typography,Select,MenuItem,FormControl,InputLabel,ListItemText,CardContent,Grid,Dialog,DialogTitle,DialogContent,DialogActions}from'@mui/material';import{ErrorOutline}from'@mui/icons-material';// import { Tree, TreeNode } from 'react-organizational-chart';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CreateJobPage(props){const[cityData,setCityData]=useState([]);const[selectedCity,setSelectedCity]=useState([]);const[selectedStates,setSelectedStates]=useState('');const[selectedUnder,setSelectedUnder]=useState([]);const[selectedCityId,setSelectedCityId]=useState([]);const[selectedRegionId,setSelectedRegionId]=useState([]);const[selectedCitiesId,setSelectedCitiesId]=useState([]);const[selectedStateId,setSelectedStateId]=useState([]);const[selectedStatesId,setSelectedStatesId]=useState([]);const[selectedUnderId,setSelectedUnderId]=useState([]);const[openDialog,setOpenDialog]=useState(false);const[jobTitle,setJobTitle]=useState('');const[description,setDescription]=useState('');const[selectedJobTypes,setSelectedJobTypes]=useState([]);const[experience,setExperience]=useState('');const[salary,setSalary]=useState('');const[workingUnder,setWorkingUnder]=useState([]);const[status,setStatus]=useState(false);const[jobRoles,setJobRoles]=useState([]);const[newParameter,setNewParameter]=useState('');const JOB_TYPE_CHOICES=[{value:'full-time',label:'Full-Time'},{value:'part-time',label:'Part-Time'},{value:'wfh',label:'WFH'}];const handleJobTypeChange=event=>{const selectedValue=event.target.value;if(selectedJobTypes.includes(selectedValue)){// Deselect the option\nsetSelectedJobTypes(selectedJobTypes.filter(value=>value!==selectedValue));}else{// Select the option\nsetSelectedJobTypes([...selectedJobTypes,selectedValue]);}};const handleCloseDialog=()=>{// Close the dialog\nsetOpenDialog(false);};const handleDescriptionChange=event=>{setDescription(event.target.value);};const handleStatusChange=event=>{setStatus(event.target.checked);};const handleUnderChange=event=>{const selectedNames=event.target.value;setSelectedUnder(selectedNames);// Log the corresponding IDs for selected names\nconst selectedIds=under.filter(unders=>selectedNames.includes(unders.name)).map(unders=>unders.id);setSelectedUnderId(selectedIds);};const handleWorkingUnderChange=event=>{setUnder(event.target.value);};const[regions,setRegions]=useState([]);const[cities,setCities]=useState([]);const[states,setStates]=useState([]);const[selectedRegion,setSelectedRegion]=useState('');const[selectedCities,setSelectedCities]=useState([]);const[apiData,setApiData]=useState([]);// Fetch the API data on component mount\nuseEffect(()=>{const apiUrl='api/marketplace/nested_areas/';api.get(apiUrl).then(response=>{var _response$data;// Transform the response data to include IDs\nconst transformedData=response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.map(region=>{var _region$states;return{regionId:region.region_id,// Replace with your actual key for region ID\nregion:region.region,states:region===null||region===void 0?void 0:(_region$states=region.states)===null||_region$states===void 0?void 0:_region$states.map(state=>{var _state$cities;return{stateId:state.state_id,// Replace with your actual key for city ID\nname:state.state,cities:state===null||state===void 0?void 0:(_state$cities=state.cities)===null||_state$cities===void 0?void 0:_state$cities.map(city=>({cityId:city.city_id,// Replace with your actual key for city ID\nname:city.name}))};})};});setApiData(transformedData);console.log(transformedData);}).catch(error=>{console.error('Error:',error);});},[]);useEffect(()=>{console.log(\"regionId\",selectedRegion);},[selectedRegion]);useEffect(()=>{},[selectedCityId]);const handleRegionChange=event=>{const regionId=event.target.value;setSelectedRegion(regionId);// Find the selected region from the apiData\nconst selectedRegionData=apiData.find(data=>data.regionId===regionId);// Set the available cities for the selected region\nsetStates(selectedRegionData?selectedRegionData.states:[]);// setCities(selectedRegionData ? selectedRegionData.cities : []);\nsetSelectedStates('');};const handleStateChange=event=>{const stateId=event.target.value;setSelectedStates(stateId);// Find the selected region from the apiData\nconst selectedStateData=apiData.map(data=>data.states.find(state=>state.stateId===stateId));// Set the available cities for the selected region\nsetCities(selectedStateData?selectedStateData[0].cities:[]);// setCities(selectedRegionData ? selectedRegionData.cities : []);\nsetSelectedCities([]);};const handleCityChange=event=>{const selectedNames=event.target.value;// Create a Set to ensure unique city IDs\nconst selectedIdsSet=new Set();// Loop through the regions and city_info to find IDs based on selected names\napiData.forEach(data=>data.states.forEach(item=>{if(item.stateId===selectedStates){item.cities.forEach(city=>{if(selectedNames.includes(city.name)){selectedIdsSet.add(city.cityId);}});}}));// Convert the Set back to an array\nconst selectedIds=Array.from(selectedIdsSet);setSelectedCities(selectedNames);setSelectedCityId(selectedIds);// Update selectedCityId\n};const[under,setUnder]=useState([]);useEffect(()=>{const apiUrl='api/employee/jobrole/';api.get(apiUrl).then(response=>{// Handle the response data here\nsetUnder(response===null||response===void 0?void 0:response.data);}).catch(error=>{// Handle any errors that occurred during the request\nconsole.error('Error:',error);});},[]);const handleSave=async e=>{e.preventDefault();const formData=new FormData();formData.append('name',jobTitle);formData.append('job_description',description);formData.append('experience',experience);formData.append('salary_package',salary);formData.append('working_under',selectedUnderId||null);formData.append('job_type',selectedJobTypes);// Set your default job type as needed\nformData.append('city',selectedCityId);formData.append('state',selectedStates);formData.append('region',selectedRegion);try{const response=await api.post('api/employee/jobrole/',formData,{headers:{'Content-Type':'multipart/form-data'}});// Handle the success response, e.g., show a success message or redirect\n// Clear or reset the form fields by updating the state variables\nsetOpenDialog(true);setJobTitle('');setDescription('');setExperience('');setSalary('');setSelectedRegion([]);setSelectedStates('');setSelectedCities([]);setWorkingUnder([]);setSelectedJobTypes([]);setSelectedCityId([]);setSelectedStateId([]);setSelectedUnder([]);setSelectedRegionId([]);}catch(error){// Handle any errors that occurred during the POST request\nconsole.error('Error:',error);}};const[selectedSizes,setSelectedSizes]=useState([]);return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Stack,{direction:\"row\",alignItems:\"center\",justifyContent:\"space-between\",mb:5,children:/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Create New Job Role For Arl-Tech\"})}),/*#__PURE__*/_jsxs(Stack,{direction:\"row\",sx:{width:'100%'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,p:4,sx:{width:'25%'},children:\"Details :\"}),/*#__PURE__*/_jsx(Card,{sx:{width:'75%'},children:/*#__PURE__*/_jsxs(Stack,{spacing:3,p:4,children:[/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,variant:\"outlined\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Select Region\"}),/*#__PURE__*/_jsx(Select,{label:\"Select Region\",value:selectedRegion,onChange:handleRegionChange,children:apiData.map(data=>/*#__PURE__*/_jsx(MenuItem,{value:data.regionId,children:data.region},data.regionId))}),/*#__PURE__*/_jsx(Stack,{pt:2,children:selectedRegion&&/*#__PURE__*/_jsx(Select,{label:\"Select Cities\",value:selectedStates,onChange:handleStateChange,children:states===null||states===void 0?void 0:states.map(item=>/*#__PURE__*/_jsx(MenuItem,{value:item.stateId,children:item.name},item.stateId))})}),/*#__PURE__*/_jsx(Stack,{pt:2,children:selectedStates&&/*#__PURE__*/_jsx(Select,{multiple:true,label:\"Select Cities\",value:selectedCities,onChange:handleCityChange,renderValue:selected=>selected.join(', '),children:cities===null||cities===void 0?void 0:cities.map(city=>/*#__PURE__*/_jsxs(MenuItem,{value:city.name,children:[\" \",/*#__PURE__*/_jsx(Checkbox,{checked:selectedCities.includes(city.name)}),/*#__PURE__*/_jsx(ListItemText,{primary:city.name})]},city.cityId))})})]}),/*#__PURE__*/_jsx(TextField,{label:\"Role Title\",fullWidth:true//   value={productName}\n// onChange={handleProductNameChange}\n,value:jobTitle,onChange:e=>setJobTitle(e.target.value)}),/*#__PURE__*/_jsx(TextField,{label:\"Add Job Description\",fullWidth:true,multiline:true,rows:4,value:description,onChange:handleDescriptionChange})]})})]}),/*#__PURE__*/_jsxs(Stack,{direction:\"row\",sx:{width:'100%'},mt:4,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,p:4,sx:{width:'25%'},children:\"Properties :\"}),/*#__PURE__*/_jsxs(Card,{sx:{width:'75%'},children:[/*#__PURE__*/_jsx(Stack,{px:4,pt:4,direction:\"row\",children:JOB_TYPE_CHOICES.map(jobType=>/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{checked:selectedJobTypes.includes(jobType.value),onChange:handleJobTypeChange,value:jobType.value,color:\"primary\"}),label:jobType.label},jobType.value))}),/*#__PURE__*/_jsxs(Stack,{px:4,children:[/*#__PURE__*/_jsx(TextField,{label:\"Experience\",fullWidth:true//   value={productName}\n// onChange={handleProductNameChange}\n,value:experience,onChange:e=>setExperience(e.target.value)}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:\"Don't Use ,.- or Alphabet only use Digit.\"})]}),/*#__PURE__*/_jsxs(Stack,{p:4,children:[/*#__PURE__*/_jsx(TextField,{label:\"Enter Salary\",variant:\"outlined\",value:salary,onChange:e=>setSalary(e.target.value),fullWidth:true,autoFocus:true}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:\"Don't Use ,.- or Alphabet only use Digit.\"})]}),/*#__PURE__*/_jsx(Stack,{px:4,paddingBottom:4,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,variant:\"outlined\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Working Under\"}),/*#__PURE__*/_jsx(Select,{multiple:true,label:\"Working Under\",value:selectedUnder,onChange:handleUnderChange,renderValue:selected=>selected.join(', '),children:under===null||under===void 0?void 0:under.map(unders=>selectedCityId===unders.id&&/*#__PURE__*/_jsxs(MenuItem,{value:unders.name,children:[/*#__PURE__*/_jsx(Checkbox,{checked:selectedUnder.includes(unders.name)}),/*#__PURE__*/_jsx(ListItemText,{primary:unders.name})]},unders.id))})]})})]})]}),/*#__PURE__*/_jsx(Stack,{direction:\"row\",sx:{width:'100%'},mt:4,justifyContent:'flex-end',children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleSave,color:\"warning\",children:\"Create Job\"})}),/*#__PURE__*/_jsxs(Dialog,{open:openDialog,onClose:handleCloseDialog,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Success\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:\"The job has been successfully created.\"})}),/*#__PURE__*/_jsx(DialogActions,{children:/*#__PURE__*/_jsx(Button,{onClick:handleCloseDialog,children:\"Close\"})})]})]});}","map":{"version":3,"names":["React","useEffect","useState","TextField","FormControlLabel","api","Card","Stack","Button","Checkbox","Container","Typography","Select","MenuItem","FormControl","InputLabel","ListItemText","CardContent","Grid","Dialog","DialogTitle","DialogContent","DialogActions","ErrorOutline","jsx","_jsx","jsxs","_jsxs","CreateJobPage","props","cityData","setCityData","selectedCity","setSelectedCity","selectedStates","setSelectedStates","selectedUnder","setSelectedUnder","selectedCityId","setSelectedCityId","selectedRegionId","setSelectedRegionId","selectedCitiesId","setSelectedCitiesId","selectedStateId","setSelectedStateId","selectedStatesId","setSelectedStatesId","selectedUnderId","setSelectedUnderId","openDialog","setOpenDialog","jobTitle","setJobTitle","description","setDescription","selectedJobTypes","setSelectedJobTypes","experience","setExperience","salary","setSalary","workingUnder","setWorkingUnder","status","setStatus","jobRoles","setJobRoles","newParameter","setNewParameter","JOB_TYPE_CHOICES","value","label","handleJobTypeChange","event","selectedValue","target","includes","filter","handleCloseDialog","handleDescriptionChange","handleStatusChange","checked","handleUnderChange","selectedNames","selectedIds","under","unders","name","map","id","handleWorkingUnderChange","setUnder","regions","setRegions","cities","setCities","states","setStates","selectedRegion","setSelectedRegion","selectedCities","setSelectedCities","apiData","setApiData","apiUrl","get","then","response","_response$data","transformedData","data","region","_region$states","regionId","region_id","state","_state$cities","stateId","state_id","city","cityId","city_id","console","log","catch","error","handleRegionChange","selectedRegionData","find","handleStateChange","selectedStateData","handleCityChange","selectedIdsSet","Set","forEach","item","add","Array","from","handleSave","e","preventDefault","formData","FormData","append","post","headers","selectedSizes","setSelectedSizes","children","direction","alignItems","justifyContent","mb","variant","gutterBottom","sx","width","p","spacing","fullWidth","onChange","pt","multiple","renderValue","selected","join","primary","multiline","rows","mt","px","jobType","control","color","autoFocus","paddingBottom","onClick","open","onClose"],"sources":["D:/ArlTech/ChaturdhaAdmin/src/pages/CreateJobPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport {api} from \"../Api/Api\"\r\nimport {\r\n    Card,\r\n    Stack,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Typography,\r\n    Select, MenuItem,\r\n    FormControl, InputLabel,\r\n    ListItemText,\r\n    CardContent,\r\n    Grid,Dialog, DialogTitle, DialogContent, DialogActions,\r\n} from '@mui/material';\r\nimport { ErrorOutline } from '@mui/icons-material';\r\n// import { Tree, TreeNode } from 'react-organizational-chart';\r\n\r\nexport default function CreateJobPage(props) {\r\n    const [cityData, setCityData] = useState([]);\r\n    const [selectedCity, setSelectedCity] = useState([]);\r\n    const [selectedStates, setSelectedStates] = useState('');\r\n\r\n   \r\n    const [selectedUnder, setSelectedUnder] = useState([]);\r\n\r\n    const [selectedCityId, setSelectedCityId] = useState([]);\r\n\r\n    const [selectedRegionId, setSelectedRegionId] = useState([]);\r\n\r\n\r\n    const [selectedCitiesId, setSelectedCitiesId] = useState([]);\r\n    const [selectedStateId, setSelectedStateId] = useState([]);\r\n\r\n    const [selectedStatesId, setSelectedStatesId] = useState([]);\r\n\r\n    const [selectedUnderId, setSelectedUnderId] = useState([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n\r\n    \r\n    \r\n    const [jobTitle, setJobTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    \r\n    const [selectedJobTypes, setSelectedJobTypes] = useState([]);\r\n\r\n    const[experience,setExperience]=useState('');\r\n    const [salary, setSalary] = useState('');\r\n    const [workingUnder, setWorkingUnder] = useState([]);\r\n\r\n    const [status, setStatus] = useState(false);\r\n    const [jobRoles, setJobRoles] = useState([]);\r\n    const [newParameter, setNewParameter] = useState('');\r\n    \r\n\r\n    const JOB_TYPE_CHOICES = [\r\n        { value: 'full-time', label: 'Full-Time' },\r\n        { value: 'part-time', label: 'Part-Time' },\r\n        { value: 'wfh', label: 'WFH' },\r\n      ];\r\n\r\n     \r\n  const handleJobTypeChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    if (selectedJobTypes.includes(selectedValue)) {\r\n      // Deselect the option\r\n      setSelectedJobTypes(selectedJobTypes.filter((value) => value !== selectedValue));\r\n    } else {\r\n      // Select the option\r\n      setSelectedJobTypes([...selectedJobTypes, selectedValue]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleCloseDialog = () => {\r\n    // Close the dialog\r\n    setOpenDialog(false);\r\n  };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    const handleStatusChange = (event) => {\r\n        setStatus(event.target.checked);\r\n    };\r\n\r\n \r\n      \r\n      const handleUnderChange = (event) => {\r\n        const selectedNames = event.target.value;\r\n        setSelectedUnder(selectedNames);\r\n       \r\n      \r\n        // Log the corresponding IDs for selected names\r\n        const selectedIds = under\r\n          .filter((unders) => selectedNames.includes(unders.name))\r\n          .map((unders) => unders.id);\r\n      \r\n        \r\n        setSelectedUnderId(selectedIds);\r\n      \r\n      };\r\n\r\n    const handleWorkingUnderChange = (event) => {\r\n        setUnder(event.target.value);\r\n    };\r\n\r\n\r\n    const [regions, setRegions] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n\r\n    const [selectedRegion, setSelectedRegion] = useState('');\r\n  \r\n\r\n    const [selectedCities, setSelectedCities] = useState([]);\r\n\r\n    const [apiData, setApiData] = useState([]);\r\n\r\n    // Fetch the API data on component mount\r\n    useEffect(() => {\r\n      \r\n      const apiUrl = 'api/marketplace/nested_areas/';\r\n  \r\n      api.get(apiUrl)\r\n        .then((response) => {\r\n          // Transform the response data to include IDs\r\n          const transformedData = response?.data?.map(region => ({\r\n            regionId: region.region_id, // Replace with your actual key for region ID\r\n            region: region.region,\r\n            states: region?.states?.map(state => ({\r\n              stateId: state.state_id, // Replace with your actual key for city ID\r\n              name: state.state,\r\n              cities: state?.cities?.map(city => ({\r\n                cityId: city.city_id, // Replace with your actual key for city ID\r\n                name: city.name,\r\n              })),\r\n            })),\r\n           \r\n          }));\r\n  \r\n          setApiData(transformedData);\r\n          console.log(transformedData);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n        });\r\n    }, []);\r\n  \r\n  \r\n    useEffect(() => {\r\n      console.log(\"regionId\", selectedRegion);\r\n    }, [selectedRegion]);\r\n    useEffect(() => {\r\n      \r\n    }, [selectedCityId]);\r\n  \r\n   \r\n  const handleRegionChange = (event) => {\r\n    const regionId = event.target.value;\r\n    setSelectedRegion(regionId)\r\n    // Find the selected region from the apiData\r\n    const selectedRegionData = apiData.find((data) => data.regionId === regionId);\r\n\r\n    // Set the available cities for the selected region\r\n    setStates(selectedRegionData ? selectedRegionData.states : []);\r\n    // setCities(selectedRegionData ? selectedRegionData.cities : []);\r\n    setSelectedStates('');\r\n  };\r\n\r\n  const handleStateChange = (event) => {\r\n    const stateId = event.target.value;\r\n    setSelectedStates(stateId)\r\n    // Find the selected region from the apiData\r\n    const selectedStateData = apiData.map((data) =>data.states.find((state) => state.stateId === stateId));\r\n  \r\n    // Set the available cities for the selected region\r\n    setCities(selectedStateData ? selectedStateData[0].cities : []);\r\n    // setCities(selectedRegionData ? selectedRegionData.cities : []);\r\n    setSelectedCities([]);\r\n   \r\n  };\r\n\r\n\r\n\r\n  const handleCityChange = (event) => {\r\n    const selectedNames = event.target.value;\r\n  \r\n    // Create a Set to ensure unique city IDs\r\n    const selectedIdsSet = new Set();\r\n  \r\n    // Loop through the regions and city_info to find IDs based on selected names\r\n    apiData.forEach((data) =>data.states.forEach((item) =>  {\r\n      if (item.stateId === selectedStates) {\r\n        item.cities.forEach((city) => {\r\n          if (selectedNames.includes(city.name)) {\r\n            selectedIdsSet.add(city.cityId);\r\n          }\r\n        });\r\n      }\r\n    }));\r\n  \r\n    // Convert the Set back to an array\r\n    const selectedIds = Array.from(selectedIdsSet);\r\n  \r\n    setSelectedCities(selectedNames);\r\n    setSelectedCityId(selectedIds); // Update selectedCityId\r\n   \r\n  };\r\n    \r\n    const[under,setUnder]=useState([])\r\n    \r\n    useEffect(() => {\r\n        const apiUrl = 'api/employee/jobrole/';\r\n    \r\n        api.get(apiUrl)\r\n          .then((response) => {\r\n            // Handle the response data here\r\n            setUnder(response?.data);\r\n          \r\n          \r\n          })\r\n          .catch((error) => {\r\n            // Handle any errors that occurred during the request\r\n            console.error('Error:', error);\r\n          });\r\n      }, []);\r\n\r\n    \r\n\r\n    const handleSave = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        const formData = new FormData();\r\n        formData.append('name', jobTitle);\r\n        formData.append('job_description', description);\r\n        formData.append('experience', experience);\r\n        formData.append('salary_package', salary);\r\n        formData.append('working_under', selectedUnderId || null); \r\n        formData.append('job_type', selectedJobTypes); // Set your default job type as needed\r\n        formData.append('city',  selectedCityId);\r\n        formData.append('state',selectedStates );\r\n        formData.append('region',selectedRegion );\r\n\r\n      \r\n        try {\r\n          const response = await api.post('api/employee/jobrole/', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n      \r\n          // Handle the success response, e.g., show a success message or redirect\r\n       \r\n      \r\n          // Clear or reset the form fields by updating the state variables\r\n          setOpenDialog(true);\r\n          setJobTitle('');\r\n          setDescription('');\r\n          setExperience('');\r\n          setSalary(''); \r\n          setSelectedRegion([]);\r\n          setSelectedStates('');\r\n          setSelectedCities([]);\r\n          setWorkingUnder([]);\r\n          setSelectedJobTypes([]);\r\n          setSelectedCityId([]);\r\n          setSelectedStateId([]);\r\n          setSelectedUnder([])\r\n          setSelectedRegionId([])\r\n          \r\n          \r\n      \r\n        } catch (error) {\r\n          // Handle any errors that occurred during the POST request\r\n          console.error('Error:', error);\r\n        }\r\n      };\r\n      \r\n\r\n    const [selectedSizes, setSelectedSizes] = useState([]);\r\n\r\n  \r\n\r\n    return (\r\n        <Container>\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Create New Job Role For Arl-Tech\r\n                </Typography>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Details :\r\n                </Typography>\r\n\r\n                <Card sx={{ width: '75%' }}>\r\n                    <Stack spacing={3} p={4}>\r\n                        <FormControl fullWidth variant=\"outlined\">\r\n                            <InputLabel>Select Region</InputLabel>\r\n                            <Select\r\n        label=\"Select Region\"\r\n        value={selectedRegion}\r\n        onChange={handleRegionChange}\r\n      >\r\n        {apiData.map(data => (\r\n          <MenuItem key={data.regionId} value={data.regionId}>\r\n            {data.region}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      <Stack pt={2}>\r\n      {selectedRegion && (\r\n        \r\n        <Select\r\n          label=\"Select Cities\"\r\n          value={selectedStates}\r\n          onChange={handleStateChange}\r\n      \r\n        >\r\n          {states?.map(item => (\r\n            <MenuItem key={item.stateId} value={item.stateId}>\r\n               {/* Use city.id as the value */}\r\n            {item.name}\r\n\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      )}</Stack>\r\n      \r\n      <Stack pt={2}>\r\n      {selectedStates && (\r\n        <Select\r\n          multiple\r\n          label=\"Select Cities\"\r\n          value={selectedCities}\r\n          onChange={handleCityChange}\r\n          renderValue={(selected) => selected.join(', ')}\r\n        >\r\n          {cities?.map(city => (\r\n            <MenuItem key={city.cityId} value={city.name}> {/* Use city.id as the value */}\r\n              <Checkbox checked={selectedCities.includes(city.name)} />\r\n              <ListItemText primary={city.name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      )}\r\n      </Stack>\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Role Title\"\r\n                            fullWidth\r\n                            //   value={productName}\r\n                            // onChange={handleProductNameChange}\r\n                            value={jobTitle}\r\n                            onChange={(e) => setJobTitle(e.target.value)}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Add Job Description\"\r\n                            fullWidth\r\n                            multiline\r\n                            rows={4}\r\n                            value={description}\r\n                            onChange={handleDescriptionChange}\r\n                        />\r\n                    </Stack>\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Properties :\r\n                </Typography>\r\n\r\n                <Card sx={{ width: '75%' }}>\r\n                    <Stack px={4} pt={4} direction=\"row\">\r\n\r\n                    {JOB_TYPE_CHOICES.map((jobType) => (\r\n        <FormControlLabel\r\n          key={jobType.value}\r\n          control={\r\n            <Checkbox\r\n              checked={selectedJobTypes.includes(jobType.value)}\r\n              onChange={handleJobTypeChange}\r\n              value={jobType.value}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={jobType.label}\r\n        />\r\n      ))}\r\n                    </Stack>\r\n                    <Stack px={4}>\r\n\r\n                        <TextField\r\n                            label=\"Experience\"\r\n                            fullWidth\r\n                            //   value={productName}\r\n                            // onChange={handleProductNameChange}\r\n                            value={experience}\r\n                            onChange={(e) => setExperience(e.target.value)}\r\n                        />\r\n                    <Typography variant=\"body1\">Don't Use ,.- or Alphabet only use Digit.</Typography>\r\n\r\n                    </Stack>\r\n\r\n                    <Stack p={4} >\r\n                        <TextField\r\n                            label=\"Enter Salary\"\r\n                            variant=\"outlined\"\r\n                            value={salary}\r\n                            onChange={(e) => setSalary(e.target.value)}\r\n                            fullWidth\r\n                            autoFocus\r\n                        />\r\n                     <Typography variant=\"body1\">Don't Use ,.- or Alphabet only use Digit.</Typography>\r\n\r\n                    </Stack>\r\n\r\n                    <Stack px={4} paddingBottom={4}>\r\n                        <FormControl fullWidth variant=\"outlined\">\r\n                            <InputLabel>Working Under</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                label=\"Working Under\"\r\n                                value={selectedUnder}\r\n                                onChange={handleUnderChange}\r\n                                renderValue={(selected) => selected.join(', ')}\r\n                            >\r\n                                  {under?.map((unders) => (\r\n     \r\n     selectedCityId === unders.id && (\r\n        <MenuItem key={unders.id} value={unders.name}>\r\n          <Checkbox checked={selectedUnder.includes(unders.name)} />\r\n          <ListItemText primary={unders.name} />\r\n        </MenuItem>\r\n      )\r\n      )\r\n    )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Stack>\r\n\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4} justifyContent={'flex-end'}>\r\n                <Button variant=\"contained\" onClick={handleSave} color='warning'>\r\n                    Create Job\r\n                </Button>\r\n            </Stack>\r\n\r\n\r\n            {/* <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Job Hierarchy :\r\n                </Typography>\r\n                <Card sx={{ width: '75%' }}>   \r\n                    <Stack spacing={3} p={4} direction=\"row\">\r\n                    <Grid xs={6}>\r\n                        {jobRoles.map((role, index) => (\r\n                            <Card variant=\"outlined\" >\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\">{role.title}</Typography>\r\n                                    <Typography variant=\"body1\">\r\n                                        City: {role.city.join(', ')}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body1\">\r\n                                        Working under: {role.workingUnder.join(', ')}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        ))}\r\n                    </Grid>\r\n                    </Stack>\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Example Job Hierarchy :\r\n                </Typography>\r\n                <Card sx={{ width: '75%' }}>   \r\n                    <Stack spacing={3} p={4} direction=\"row\">\r\n                    \r\n                    </Stack>\r\n                </Card>\r\n            </Stack> */}\r\n             <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Success</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body1\">The job has been successfully created.</Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n        </Container>\r\n    );\r\n}\r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}