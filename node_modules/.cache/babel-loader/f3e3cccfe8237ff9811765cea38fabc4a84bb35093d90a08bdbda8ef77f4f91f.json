{"ast":null,"code":"import React,{useEffect,useState}from'react';import{api}from\"../Api/Api\";import{Helmet}from'react-helmet-async';import{Card,Table,Stack,Paper,Avatar,Button,Popover,Checkbox,TableRow,MenuItem,TableBody,TableCell,Dialog,DialogContent,DialogTitle,Container,Typography,IconButton,TableContainer,TablePagination,TextField,Box}from'@mui/material';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const YourComponent=()=>{const[regions,setRegions]=useState([]);const[newRegionName,setNewRegionName]=useState('');const[newCityName,setNewCityName]=useState('');const[newPincode,setNewPincode]=useState('');const[newArea,setNewArea]=useState('');const[newStateNames,setNewStateNames]=useState('');const[loading,setLoading]=useState(true);const[selectedRegionId,setSelectedRegionId]=useState(null);const[selectedStateId,setSelectedStateId]=useState(null);const[selectedCityId,setSelectedCityId]=useState(null);const[selectedPincodeId,setSelectedPincodeId]=useState(null);// Create state to manage pincode inputs for each city separately\nconst[pincodeInputs,setPincodeInputs]=useState({});const[cityNames,setCityNames]=useState({});const[stateNames,setStateNames]=useState({});// Create state to manage area inputs for each pincode separately\nconst[areaInputs,setAreaInputs]=useState({});const fetchData=()=>{api.get(\"api/marketplace/nested_areas/\").then(response=>setRegions(response.data)).catch(error=>console.error('Error fetching regions:',error));};useEffect(()=>{fetchData();},[]);const companyName=\"Locations\";const[loadingCompany,setLoadingCompany]=useState(\"\");useEffect(()=>{if(loading){animateCompany();}6000;},[loading]);const animateCompany=()=>{let currentIndex=0;const interval=setInterval(()=>{if(currentIndex<=companyName.length){setLoadingCompany(companyName.substring(0,currentIndex));currentIndex++;}else{clearInterval(interval);setLoading(false);}},100);// Adjust the interval duration as needed\n};const handleRegionSubmit=e=>{e.preventDefault();console.log(\"jk\",newRegionName);// Create a new region with the entered name\nconst newRegion={name:newRegionName};api.post(\"api/marketplace/regions/\",newRegion).then(response=>{// Refetch the regions data after a new region is created\napi.get(\"api/marketplace/nested_areas/\").then(response=>setRegions(response.data)).catch(error=>console.error('Error fetching regions:',error));// Clear the input field\nsetNewRegionName('');}).catch(error=>console.error('Error creating region:',error));};const handleStateSubmit=regionId=>e=>{e.preventDefault();// Create a new city with the entered name and the selected region\nconst newState={name:stateNames[regionId],region:regionId};// Send a POST request to create the new state\napi.post(\"api/marketplace/states/\",newState).then(response=>{// Clear the input field\nsetStateNames({...stateNames,[regionId]:''});fetchData();}).catch(error=>console.error('Error creating state:',error));};const handleCitySubmit=stateId=>e=>{e.preventDefault();// Create a new city with the entered name and the selected region\nconst newCity={name:cityNames[stateId],state:stateId};// Send a POST request to create the new city\napi.post(\"api/marketplace/cities/\",newCity).then(response=>{// Update the state with the new city\nsetCityNames({...cityNames,[stateId]:''});fetchData();// Clear the input field\n}).catch(error=>console.error('Error creating city:',error));};const handlePincodeSubmit=cityId=>e=>{e.preventDefault();// Ensure pincodeInputs has a value for the specific city\nconst cityPincode=pincodeInputs[cityId];if(!cityPincode.trim()){// Optionally, you can handle this case by showing an error message or preventing the form submission.\nconsole.error('Pincode cannot be blank');return;}// Create a new pincode with the entered value and the selected city\nconst newPincodeData={code:cityPincode,city:cityId};// Send a POST request to create the new pincode\napi.post(\"api/marketplace/pincodes/\",newPincodeData).then(response=>{// Update the state with the new pincode\nsetPincodeInputs({...pincodeInputs,[cityId]:''});fetchData();}).catch(error=>console.error('Error creating pincode:',error));};const handleAreaSubmit=pincodeId=>e=>{e.preventDefault();const area=areaInputs[pincodeId];// Create a new area with the entered value and the selected pincode\nconst newAreaData={name:area,pincode:pincodeId};// Send a POST request to create the new area\napi.post(\"api/marketplace/areas/\",newAreaData).then(response=>{// Update the state with the new area\n// Clear the input field for the specific pincode\nsetAreaInputs({...areaInputs,[pincodeId]:''});setNewArea('');fetchData();}).catch(error=>console.error('Error creating area:',error));};// ...\n// Update the state for city name when typing in the input field\nconst handleStateNameChange=(regionId,value)=>{setStateNames({...stateNames,[regionId]:value});};const handleCityNameChange=(stateId,value)=>{setCityNames({...cityNames,[stateId]:value});};// Update the state for pincodeInputs when typing in a pincode text field\nconst handlePincodeInputChange=(cityId,value)=>{setPincodeInputs({...pincodeInputs,[cityId]:value});};// Update the state for areaInputs when typing in an area text field\nconst handleAreaInputChange=(pincodeId,value)=>{setAreaInputs({...areaInputs,[pincodeId]:value});};if(loading){return/*#__PURE__*/_jsx(Container,{maxWidth:\"xl\",children:/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center'},children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:loadingCompany})})});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Helmet,{children:/*#__PURE__*/_jsx(\"title\",{children:\" Locations  \"})}),/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Stack,{direction:'row',alignItems:'center',spacing:1,pt:2,children:/*#__PURE__*/_jsx(Typography,{variant:\"h1\",component:\"div\",children:\"Our Working Regions\"})}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleRegionSubmit,children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,p:1,children:[/*#__PURE__*/_jsx(TextField,{type:\"text\",margin:\"dense\",label:\"Add New Region\",color:\"warning\",value:newRegionName,onChange:e=>setNewRegionName(e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"warning\",children:\"Create Region\"})]})}),/*#__PURE__*/_jsx(Card,{sx:{width:'100%',padding:1},children:regions===null||regions===void 0?void 0:regions.map(region=>{var _region$states;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h2\",component:\"div\",pl:1,children:\"Region : \"}),/*#__PURE__*/_jsx(Typography,{variant:\"h2\",component:\"div\",color:\"orange\",children:region.region}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleStateSubmit(region.region_id),children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,p:1,children:[/*#__PURE__*/_jsx(TextField,{type:\"text\",margin:\"dense\",label:\"Add New State\",color:\"warning\",value:stateNames[region.region_id]||'',onChange:e=>handleStateNameChange(region.region_id,e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"warning\",children:\"Create state\"})]})})]}),region===null||region===void 0?void 0:(_region$states=region.states)===null||_region$states===void 0?void 0:_region$states.map(state=>{var _state$cities;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,paddingLeft:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h3\",component:\"div\",pl:1,children:\"State : \"}),/*#__PURE__*/_jsx(Typography,{variant:\"h3\",component:\"div\",color:\"orange\",children:state.state}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleCitySubmit(state.state_id),children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,p:1,children:[/*#__PURE__*/_jsx(TextField,{type:\"text\",margin:\"dense\",label:\"Add New city\",color:\"warning\",value:cityNames[state.state_id]||'',onChange:e=>handleCityNameChange(state.state_id,e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"warning\",children:\"Create city\"})]})})]}),(state===null||state===void 0?void 0:state.cities)&&(state===null||state===void 0?void 0:(_state$cities=state.cities)===null||_state$cities===void 0?void 0:_state$cities.map(city=>{var _city$pincodes;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,pl:3,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"div\",pl:1,children:\"City : \"}),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"div\",color:\"orange\",children:city.name}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handlePincodeSubmit(city.city_id),children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,p:1,children:[/*#__PURE__*/_jsx(TextField,{type:\"text\",margin:\"dense\",label:\"Add New Pincode\",color:\"warning\",value:pincodeInputs[city.city_id]||'',onChange:e=>handlePincodeInputChange(city.city_id,e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"warning\",children:\"Create Pincode\"})]})})]}),/*#__PURE__*/_jsx(Card,{sx:{width:'100%',margin:3,padding:1},children:(city===null||city===void 0?void 0:city.pincodes)&&(city===null||city===void 0?void 0:(_city$pincodes=city.pincodes)===null||_city$pincodes===void 0?void 0:_city$pincodes.map(pincode=>{var _pincode$areas;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,pl:2,children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h4\",component:\"div\",children:[\"Pincode : \",pincode.code]}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleAreaSubmit(pincode.pincode_id),style:{justifyContent:\"center\",alignItems:\"center\"},children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",alignItems:\"center\",spacing:1,children:[/*#__PURE__*/_jsx(TextField,{type:\"text\",margin:\"dense\",label:\"Add New Area Name\",color:\"warning\",value:areaInputs[pincode.pincode_id]||'',onChange:e=>handleAreaInputChange(pincode.pincode_id,e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"warning\",children:\"Create Area\"})]})})]}),/*#__PURE__*/_jsxs(Stack// direction={\"row\"}\n// alignItems={\"center\"}\n,{spacing:1,pl:8,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",pl:2,children:\"Area :\"}),(pincode===null||pincode===void 0?void 0:pincode.areas)&&(pincode===null||pincode===void 0?void 0:(_pincode$areas=pincode.areas)===null||_pincode$areas===void 0?void 0:_pincode$areas.map(area=>/*#__PURE__*/_jsx(\"li\",{style:{paddingLeft:20,marginLeft:20},children:area},area.area_id)))]})]},pincode.pincode_id);}))})]},city.city_id);}))]},state.state_id);})]},region.region_id);})})]})})]});};export default YourComponent;","map":{"version":3,"names":["React","useEffect","useState","api","Helmet","Card","Table","Stack","Paper","Avatar","Button","Popover","Checkbox","TableRow","MenuItem","TableBody","TableCell","Dialog","DialogContent","DialogTitle","Container","Typography","IconButton","TableContainer","TablePagination","TextField","Box","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","YourComponent","regions","setRegions","newRegionName","setNewRegionName","newCityName","setNewCityName","newPincode","setNewPincode","newArea","setNewArea","newStateNames","setNewStateNames","loading","setLoading","selectedRegionId","setSelectedRegionId","selectedStateId","setSelectedStateId","selectedCityId","setSelectedCityId","selectedPincodeId","setSelectedPincodeId","pincodeInputs","setPincodeInputs","cityNames","setCityNames","stateNames","setStateNames","areaInputs","setAreaInputs","fetchData","get","then","response","data","catch","error","console","companyName","loadingCompany","setLoadingCompany","animateCompany","currentIndex","interval","setInterval","length","substring","clearInterval","handleRegionSubmit","e","preventDefault","log","newRegion","name","post","handleStateSubmit","regionId","newState","region","handleCitySubmit","stateId","newCity","state","handlePincodeSubmit","cityId","cityPincode","trim","newPincodeData","code","city","handleAreaSubmit","pincodeId","area","newAreaData","pincode","handleStateNameChange","value","handleCityNameChange","handlePincodeInputChange","handleAreaInputChange","maxWidth","children","sx","display","justifyContent","alignItems","variant","direction","spacing","pt","component","onSubmit","p","type","margin","label","color","onChange","target","width","padding","map","_region$states","pl","region_id","states","_state$cities","paddingLeft","state_id","cities","_city$pincodes","city_id","pincodes","_pincode$areas","pincode_id","style","areas","marginLeft","area_id"],"sources":["D:/ArlTech/ChaturdhaAdmin/src/pages/Pincodes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { api } from \"../Api/Api\"\r\n\r\nimport { Helmet } from 'react-helmet-async';\r\nimport {\r\n  Card,\r\n  Table,\r\n  Stack,\r\n  Paper,\r\n  Avatar,\r\n  Button,\r\n  Popover,\r\n  Checkbox,\r\n  TableRow,\r\n  MenuItem,\r\n  TableBody,\r\n  TableCell,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Container,\r\n  Typography,\r\n  IconButton,\r\n  TableContainer,\r\n  TablePagination,\r\n  TextField,Box\r\n} from '@mui/material';\r\nconst YourComponent = () => {\r\n  const [regions, setRegions] = useState([]);\r\n  const [newRegionName, setNewRegionName] = useState('');\r\n  const [newCityName, setNewCityName] = useState('');\r\n  const [newPincode, setNewPincode] = useState('');\r\n  const [newArea, setNewArea] = useState('');\r\n  const [newStateNames, setNewStateNames] = useState('');\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  const [selectedRegionId, setSelectedRegionId] = useState(null);\r\n  const [selectedStateId, setSelectedStateId] = useState(null);\r\n\r\n  const [selectedCityId, setSelectedCityId] = useState(null);\r\n  const [selectedPincodeId, setSelectedPincodeId] = useState(null);\r\n\r\n  // Create state to manage pincode inputs for each city separately\r\n  const [pincodeInputs, setPincodeInputs] = useState({});\r\n  const [cityNames, setCityNames] = useState({});\r\n  const [stateNames, setStateNames] = useState({});\r\n\r\n\r\n  // Create state to manage area inputs for each pincode separately\r\n  const [areaInputs, setAreaInputs] = useState({});\r\n\r\n  const fetchData = () => {\r\n    api.get(`api/marketplace/nested_areas/`)\r\n      .then(response => setRegions(response.data))\r\n      .catch(error => console.error('Error fetching regions:', error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  \r\n  \r\n  const companyName = \"Locations\";\r\n\r\n  const [loadingCompany, setLoadingCompany] = useState(\"\");\r\n  \r\n  useEffect(() => {\r\n    if (loading) {\r\n      animateCompany();\r\n    }6000\r\n  }, [loading]);\r\n\r\n  const animateCompany = () => {\r\n    let currentIndex = 0;\r\n    \r\n    const interval = setInterval(() => {\r\n      if (currentIndex <= companyName.length) {\r\n        setLoadingCompany(companyName.substring(0, currentIndex));\r\n        currentIndex++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setLoading(false);\r\n      }\r\n    }, 100); // Adjust the interval duration as needed\r\n  };\r\n\r\n  \r\n  const handleRegionSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(\"jk\", newRegionName)\r\n    // Create a new region with the entered name\r\n    const newRegion = { name: newRegionName };\r\n\r\n    api.post(`api/marketplace/regions/`, newRegion)\r\n      .then(response => {\r\n        // Refetch the regions data after a new region is created\r\n        api.get(`api/marketplace/nested_areas/`)\r\n          .then(response => setRegions(response.data))\r\n          .catch(error => console.error('Error fetching regions:', error));\r\n\r\n        // Clear the input field\r\n        setNewRegionName('');\r\n      })\r\n      .catch(error => console.error('Error creating region:', error));\r\n  };\r\n\r\n  \r\n  const handleStateSubmit = (regionId) => (e) => {\r\n    e.preventDefault();\r\n\r\n    // Create a new city with the entered name and the selected region\r\n    const newState = { name: stateNames[regionId], region: regionId };\r\n\r\n    // Send a POST request to create the new state\r\n    api.post(`api/marketplace/states/`, newState)\r\n      .then(response => {\r\n       \r\n        // Clear the input field\r\n        setStateNames({ ...stateNames, [regionId]: '' });\r\n       fetchData()\r\n      \r\n      })\r\n      .catch(error => console.error('Error creating state:', error));\r\n  };\r\n\r\n  \r\n\r\n  const handleCitySubmit = (stateId) => (e) => {\r\n    e.preventDefault();\r\n\r\n    // Create a new city with the entered name and the selected region\r\n    const newCity = { name: cityNames[stateId], state: stateId };\r\n\r\n    // Send a POST request to create the new city\r\n    api.post(`api/marketplace/cities/`, newCity)\r\n      .then(response => {\r\n        // Update the state with the new city\r\n        setCityNames({ ...cityNames, [stateId]: '' });\r\n\r\n       fetchData()\r\n        // Clear the input field\r\n      })\r\n      .catch(error => console.error('Error creating city:', error));\r\n  };\r\n\r\n  const handlePincodeSubmit = (cityId) => (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure pincodeInputs has a value for the specific city\r\n    const cityPincode = pincodeInputs[cityId];\r\n\r\n    if (!cityPincode.trim()) {\r\n      // Optionally, you can handle this case by showing an error message or preventing the form submission.\r\n      console.error('Pincode cannot be blank');\r\n      return;\r\n    }\r\n\r\n    // Create a new pincode with the entered value and the selected city\r\n    const newPincodeData = { code: cityPincode, city: cityId };\r\n    // Send a POST request to create the new pincode\r\n    api.post(`api/marketplace/pincodes/`, newPincodeData)\r\n      .then(response => {\r\n        // Update the state with the new pincode\r\n        setPincodeInputs({ ...pincodeInputs, [cityId]: '' });\r\n         fetchData()\r\n\r\n      })\r\n      .catch(error => console.error('Error creating pincode:', error));\r\n  };\r\n\r\n  const handleAreaSubmit = (pincodeId) => (e) => {\r\n    e.preventDefault();\r\n\r\n\r\n    const area = areaInputs[pincodeId];\r\n    // Create a new area with the entered value and the selected pincode\r\n    const newAreaData = { name: area, pincode: pincodeId };\r\n\r\n    // Send a POST request to create the new area\r\n    api.post(`api/marketplace/areas/`, newAreaData)\r\n      .then(response => {\r\n        // Update the state with the new area\r\n        // Clear the input field for the specific pincode\r\n        setAreaInputs({ ...areaInputs, [pincodeId]: '' });\r\n        setNewArea('');\r\n        fetchData()\r\n\r\n      })\r\n      .catch(error => console.error('Error creating area:', error));\r\n  };\r\n\r\n\r\n\r\n  // ...\r\n\r\n  // Update the state for city name when typing in the input field\r\n\r\n  const handleStateNameChange = (regionId, value) => {\r\n    setStateNames({ ...stateNames, [regionId]: value });\r\n  };\r\n\r\n\r\n  const handleCityNameChange = (stateId, value) => {\r\n    setCityNames({ ...cityNames, [stateId]: value });\r\n  };\r\n\r\n\r\n  // Update the state for pincodeInputs when typing in a pincode text field\r\n  const handlePincodeInputChange = (cityId, value) => {\r\n    setPincodeInputs({ ...pincodeInputs, [cityId]: value });\r\n  };\r\n\r\n  // Update the state for areaInputs when typing in an area text field\r\n  const handleAreaInputChange = (pincodeId, value) => {\r\n    setAreaInputs({ ...areaInputs, [pincodeId]: value });\r\n  };\r\n\r\n  \r\n   \r\n  if (loading) { \r\n    return (\r\n      <Container maxWidth=\"xl\">\r\n  <Box\r\n    sx={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n   \r\n    }}\r\n  >\r\n    <Typography variant=\"h6\">{loadingCompany}</Typography>\r\n  </Box>\r\n</Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Locations  </title>\r\n      </Helmet>\r\n\r\n      <Container>\r\n        <div>\r\n          <Stack direction={'row'} alignItems={'center'} spacing={1} pt={2}>\r\n            <Typography variant=\"h1\" component=\"div\">Our Working Regions</Typography>\r\n          </Stack>\r\n              {/* Form for creating a new region */}\r\n              <form onSubmit={handleRegionSubmit}>\r\n           <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          p={1}\r\n                        >\r\n                    <TextField\r\n                          type=\"text\"\r\n                          margin=\"dense\"\r\n                          label=\"Add New Region\"\r\n                          color='warning'\r\n                          value={newRegionName}\r\n                onChange={(e) => setNewRegionName(e.target.value)}\r\n             ></TextField>\r\n                       <Button type=\"submit\" color='warning'>\r\n                            Create Region\r\n                          </Button>\r\n                   </Stack>\r\n            \r\n          </form>\r\n          <Card sx={{ width: '100%', padding: 1 }}>\r\n          \r\n          {regions?.map(region => (\r\n            <div key={region.region_id}>\r\n              <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                        >\r\n                          <Typography variant=\"h2\" component=\"div\" pl={1} >Region : </Typography>\r\n              <Typography variant=\"h2\" component=\"div\" color=\"orange\">{region.region}</Typography>\r\n               {/* Form for creating a new city within the region */}\r\n               <form onSubmit={handleStateSubmit(region.region_id)}>\r\n               <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          p={1}\r\n                        >\r\n                    <TextField\r\n                          type=\"text\"\r\n                          margin=\"dense\"\r\n                          label=\"Add New State\"\r\n                          color='warning'\r\n                          value={stateNames[region.region_id] || ''}\r\n                    onChange={(e) => handleStateNameChange(region.region_id, e.target.value)}\r\n                   ></TextField>\r\n                       <Button type=\"submit\" color='warning'>\r\n                            Create state\r\n                          </Button>\r\n                   </Stack>\r\n                \r\n              </form>\r\n              </Stack>\r\n              {region?.states?.map(state => (\r\n            <div key={state.state_id}>\r\n              <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          paddingLeft={2}\r\n                        >\r\n                          <Typography variant=\"h3\" component=\"div\" pl={1} >State : </Typography>\r\n\r\n              <Typography variant=\"h3\" component=\"div\" color=\"orange\">{state.state}</Typography>\r\n               {/* Form for creating a new city within the region */}\r\n               <form onSubmit={handleCitySubmit(state.state_id)}>\r\n               <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          p={1}\r\n                        >\r\n                    <TextField\r\n                          type=\"text\"\r\n                          margin=\"dense\"\r\n                          label=\"Add New city\"\r\n                          color='warning'\r\n                          value={cityNames[state.state_id] || ''}\r\n                    onChange={(e) => handleCityNameChange(state.state_id, e.target.value)}\r\n                   ></TextField>\r\n                       <Button type=\"submit\" color='warning'>\r\n                            Create city\r\n                          </Button>\r\n                   </Stack>\r\n                \r\n              </form>\r\n              </Stack>\r\n              {state?.cities && state?.cities?.map(city => (\r\n                <div key={city.city_id}>\r\n                   <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          pl={3}\r\n                        >\r\n                          <Typography variant=\"h4\" component=\"div\" pl={1} >City : </Typography>\r\n                  <Typography variant=\"h4\" component=\"div\" color=\"orange\">{city.name}</Typography>\r\n                    {/* Form for creating a new pincode within the city */}\r\n                    <form onSubmit={handlePincodeSubmit(city.city_id)}>\r\n                    <Stack\r\n                          direction={\"row\"}\r\n                          alignItems={\"center\"}\r\n                          spacing={1}\r\n                          p={1}\r\n                        >\r\n                    <TextField\r\n                          type=\"text\"\r\n                          margin=\"dense\"\r\n                          label=\"Add New Pincode\"\r\n                          color='warning'\r\n                          value={pincodeInputs[city.city_id] || ''}\r\n                          onChange={(e) => handlePincodeInputChange(city.city_id, e.target.value)}\r\n                       ></TextField>\r\n                       <Button type=\"submit\" color='warning'>\r\n                            Create Pincode\r\n                          </Button>\r\n                   </Stack>\r\n                  </form>\r\n                  </Stack>\r\n                  <Card sx={{ width: '100%', margin: 3, padding: 1 }}>\r\n\r\n{city?.pincodes && city?.pincodes?.map(pincode => (\r\n  <div key={pincode.pincode_id}>\r\n    <Stack\r\n        direction={\"row\"}\r\n        alignItems={\"center\"}\r\n        spacing={1}\r\n        pl={2}\r\n      >\r\n    <Typography variant=\"h4\" component=\"div\" >Pincode : {pincode.code}</Typography>\r\n      {/* Form for creating a new area within the pincode */}\r\n      <form onSubmit={handleAreaSubmit(pincode.pincode_id)} style={{ justifyContent: \"center\", alignItems: \"center\" }}>\r\n      <Stack\r\n        direction={\"row\"}\r\n        alignItems={\"center\"}\r\n        spacing={1}\r\n      >\r\n      <TextField\r\n        type=\"text\"\r\n        margin=\"dense\"\r\n        label=\"Add New Area Name\"\r\n        color='warning'\r\n        value={areaInputs[pincode.pincode_id] || ''}\r\n        onChange={(e) => handleAreaInputChange(pincode.pincode_id, e.target.value)}\r\n      ></TextField>\r\n        <Button type=\"submit\" color='warning'>\r\n          Create Area\r\n        </Button>\r\n   </Stack>\r\n\r\n    </form>\r\n    </Stack>\r\n    <Stack\r\n        // direction={\"row\"}\r\n        // alignItems={\"center\"}\r\n        spacing={1}\r\n        pl={8}\r\n      >\r\n<Typography variant=\"h6\" component=\"div\" pl={2}>Area :</Typography>\r\n\r\n    {pincode?.areas && pincode?.areas?.map(area => (\r\n      <li key={area.area_id} style={{ paddingLeft: 20, marginLeft: 20 }}>{area}</li>\r\n    ))}\r\n    </Stack>\r\n\r\n  \r\n  </div>\r\n))}\r\n</Card>\r\n                  </div>\r\n              ))}\r\n\r\n              \r\n                </div>\r\n              ))}\r\n\r\n             \r\n            </div>\r\n          ))}\r\n\r\n          </Card>\r\n         \r\n         \r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default YourComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}