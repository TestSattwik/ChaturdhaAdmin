{"ast":null,"code":"import React,{useEffect,useState}from'react';import TextField from'@mui/material/TextField';import FormControlLabel from'@mui/material/FormControlLabel';import{api}from\"../Api/Api\";import{Card,Stack,Button,Checkbox,Container,Typography,Select,MenuItem,FormControl,InputLabel,ListItemText,CardContent,Grid}from'@mui/material';// import { Tree, TreeNode } from 'react-organizational-chart';\nimport Dialog from'@mui/material/Dialog';import DialogActions from'@mui/material/DialogActions';import DialogContent from'@mui/material/DialogContent';import DialogContentText from'@mui/material/DialogContentText';import DialogTitle from'@mui/material/DialogTitle';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function CreateJobPage(props){const[cityData,setCityData]=useState([]);const[selectedCity,setSelectedCity]=useState([]);const[selectedUnder,setSelectedUnder]=useState([]);const[selectedCityId,setSelectedCityId]=useState([]);const[selectedRegionId,setSelectedRegionId]=useState([]);const[selectedCitiesId,setSelectedCitiesId]=useState([]);const[selectedUnderId,setSelectedUnderId]=useState([]);const[openDialog,setOpenDialog]=useState(false);console.log(selectedCity);const[jobTitle,setJobTitle]=useState('');const[description,setDescription]=useState('');const[selectedJobTypes,setSelectedJobTypes]=useState([]);const[experience,setExperience]=useState('');const[salary,setSalary]=useState('');const[workingUnder,setWorkingUnder]=useState([]);const[status,setStatus]=useState(false);const[jobRoles,setJobRoles]=useState([]);const[newParameter,setNewParameter]=useState('');const JOB_TYPE_CHOICES=[{value:'full-time',label:'Full-Time'},{value:'part-time',label:'Part-Time'},{value:'wfh',label:'WFH'}];const handleJobTypeChange=event=>{const selectedValue=event.target.value;if(selectedJobTypes.includes(selectedValue)){// Deselect the option\nsetSelectedJobTypes(selectedJobTypes.filter(value=>value!==selectedValue));}else{// Select the option\nsetSelectedJobTypes([...selectedJobTypes,selectedValue]);}};const handleCloseDialog=()=>{// Close the dialog\nsetOpenDialog(false);};const handleDescriptionChange=event=>{setDescription(event.target.value);};const handleStatusChange=event=>{setStatus(event.target.checked);};const handleCityChange=event=>{const selectedNames=event.target.value;setSelectedCity(selectedNames);// Log the corresponding IDs for selected names\nconst selectedIds=cityData.filter(city=>selectedNames.includes(city.name)).map(city=>city.id);// Update the selectedCity state with the IDs\nconst selectedId=selectedIds.length>0?selectedIds[0]:1;setSelectedCityId(selectedId);console.log(selectedId);};const handleUnderChange=event=>{const selectedNames=event.target.value;setSelectedUnder(selectedNames);// Log the corresponding IDs for selected names\nconst selectedIds=under.filter(unders=>selectedNames.includes(unders.name)).map(unders=>unders.id);setSelectedUnderId(selectedIds);};const handleWorkingUnderChange=event=>{setUnder(event.target.value);};const[regions,setRegions]=useState([]);const[cities,setCities]=useState([]);const[selectedRegion,setSelectedRegion]=useState('');const[selectedCities,setSelectedCities]=useState([]);const[apiData,setApiData]=useState([]);// Fetch the API data on component mount\nuseEffect(()=>{const apiUrl='api/marketplace/nested_areas/';api.get(apiUrl).then(response=>{// Transform the response data to include IDs\nconst transformedData=response.data.map(region=>({regionId:region.region_id,// Replace with your actual key for region ID\nregion:region.region,cities:region.cities.map(city=>({cityId:city.city_id,// Replace with your actual key for city ID\nname:city.name}))}));setApiData(transformedData);console.log(transformedData);}).catch(error=>{console.error('Error:',error);});},[]);useEffect(()=>{console.log(\"regionId\",selectedRegion);},[selectedRegion]);useEffect(()=>{},[selectedCityId]);const handleRegionChange=event=>{const regionId=event.target.value;setSelectedRegion(regionId);// Find the selected region from the apiData\nconst selectedRegionData=apiData.find(data=>data.regionId===regionId);// Set the available cities for the selected region\nsetCities(selectedRegionData?selectedRegionData.cities:[]);setSelectedCities([]);};const handleCityChange1=event=>{const selectedNames=event.target.value;// Create a Set to ensure unique city IDs\nconst selectedIdsSet=new Set();// Loop through the regions and city_info to find IDs based on selected names\napiData.forEach(data=>{if(data.regionId===selectedRegion){data.cities.forEach(city=>{if(selectedNames.includes(city.name)){selectedIdsSet.add(city.cityId);}});}});// Convert the Set back to an array\nconst selectedIds=Array.from(selectedIdsSet);setSelectedCities(selectedNames);setSelectedCityId(selectedIds);// Update selectedCityId\n};const[under,setUnder]=useState([]);useEffect(()=>{const apiUrl='api/employee/jobrole/';api.get(apiUrl).then(response=>{// Handle the response data here\nsetUnder(response.data);console.log(response.data);}).catch(error=>{// Handle any errors that occurred during the request\nconsole.error('Error:',error);});},[]);console.log(\"cityNew\",selectedCityId);const handleSave=async e=>{e.preventDefault();const formData=new FormData();formData.append('name',jobTitle);formData.append('job_description',description);formData.append('experience',experience);formData.append('salary_package',salary);formData.append('working_under',selectedUnderId||null);formData.append('job_type',selectedJobTypes);// Set your default job type as needed\nformData.append('city',selectedCityId);formData.append('region',selectedRegion);try{const response=await api.post('api/employee/jobrole/',formData,{headers:{'Content-Type':'multipart/form-data'}});// Handle the success response, e.g., show a success message or redirect\n// Clear or reset the form fields by updating the state variables\nsetJobTitle('');setDescription('');setExperience('');setSalary('');setSelectedCity([]);setWorkingUnder([]);setSelectedJobTypes([]);setSelectedCityId([]);setSelectedUnder([]);setSelectedRegionId([]);setOpenDialog(true);}catch(error){// Handle any errors that occurred during the POST request\nconsole.error('Error:',error);}};const[selectedSizes,setSelectedSizes]=useState([]);return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Stack,{direction:\"row\",alignItems:\"center\",justifyContent:\"space-between\",mb:5,children:/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Create New Job Role For Arl-Tech\"})}),/*#__PURE__*/_jsxs(Stack,{direction:\"row\",sx:{width:'100%'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,p:4,sx:{width:'25%'},children:\"Details :\"}),/*#__PURE__*/_jsx(Card,{sx:{width:'75%'},children:/*#__PURE__*/_jsxs(Stack,{spacing:3,p:4,children:[/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,variant:\"outlined\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Select Region\"}),/*#__PURE__*/_jsx(Select,{label:\"Select Region\",value:selectedRegion,onChange:handleRegionChange,children:apiData.map(data=>/*#__PURE__*/_jsx(MenuItem,{value:data.regionId,children:data.region},data.regionId))}),selectedRegion&&/*#__PURE__*/_jsx(Select,{multiple:true,label:\"Select Cities\",value:selectedCities,onChange:handleCityChange1,renderValue:selected=>selected.join(', '),children:cities.map(city=>/*#__PURE__*/_jsxs(MenuItem,{value:city.name,children:[\" \",/*#__PURE__*/_jsx(Checkbox,{checked:selectedCities.includes(city.name)}),/*#__PURE__*/_jsx(ListItemText,{primary:city.name})]},city.cityId))})]}),/*#__PURE__*/_jsx(TextField,{label:\"Role Title\",fullWidth:true//   value={productName}\n// onChange={handleProductNameChange}\n,value:jobTitle,onChange:e=>setJobTitle(e.target.value)}),/*#__PURE__*/_jsx(TextField,{label:\"Add Job Description\",fullWidth:true,multiline:true,rows:4,value:description,onChange:handleDescriptionChange})]})})]}),/*#__PURE__*/_jsxs(Stack,{direction:\"row\",sx:{width:'100%'},mt:4,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,p:4,sx:{width:'25%'},children:\"Properties :\"}),/*#__PURE__*/_jsxs(Card,{sx:{width:'75%'},children:[/*#__PURE__*/_jsx(Stack,{px:4,pt:4,direction:\"row\",children:JOB_TYPE_CHOICES.map(jobType=>/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{checked:selectedJobTypes.includes(jobType.value),onChange:handleJobTypeChange,value:jobType.value,color:\"primary\"}),label:jobType.label},jobType.value))}),/*#__PURE__*/_jsx(Stack,{px:4,direction:\"row\",children:/*#__PURE__*/_jsx(TextField,{label:\"Experience\",fullWidth:true//   value={productName}\n// onChange={handleProductNameChange}\n,value:experience,onChange:e=>setExperience(e.target.value)})}),/*#__PURE__*/_jsx(Stack,{p:4,children:/*#__PURE__*/_jsx(TextField,{label:\"Enter Salary\",variant:\"outlined\",value:salary,onChange:e=>setSalary(e.target.value),fullWidth:true,autoFocus:true})}),/*#__PURE__*/_jsx(Stack,{px:4,paddingBottom:4,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,variant:\"outlined\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Working Under\"}),/*#__PURE__*/_jsx(Select,{multiple:true,label:\"Working Under\",value:selectedUnder,onChange:handleUnderChange,renderValue:selected=>selected.join(', '),children:under.map(unders=>selectedCityId===unders.id&&/*#__PURE__*/_jsxs(MenuItem,{value:unders.name,children:[/*#__PURE__*/_jsx(Checkbox,{checked:selectedUnder.includes(unders.name)}),/*#__PURE__*/_jsx(ListItemText,{primary:unders.name})]},unders.id))})]})})]})]}),/*#__PURE__*/_jsx(Stack,{direction:\"row\",sx:{width:'100%'},mt:4,justifyContent:'flex-end',children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleSave,color:\"warning\",children:\"Create Job\"})})]});}","map":{"version":3,"names":["React","useEffect","useState","TextField","FormControlLabel","api","Card","Stack","Button","Checkbox","Container","Typography","Select","MenuItem","FormControl","InputLabel","ListItemText","CardContent","Grid","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","jsx","_jsx","jsxs","_jsxs","CreateJobPage","props","cityData","setCityData","selectedCity","setSelectedCity","selectedUnder","setSelectedUnder","selectedCityId","setSelectedCityId","selectedRegionId","setSelectedRegionId","selectedCitiesId","setSelectedCitiesId","selectedUnderId","setSelectedUnderId","openDialog","setOpenDialog","console","log","jobTitle","setJobTitle","description","setDescription","selectedJobTypes","setSelectedJobTypes","experience","setExperience","salary","setSalary","workingUnder","setWorkingUnder","status","setStatus","jobRoles","setJobRoles","newParameter","setNewParameter","JOB_TYPE_CHOICES","value","label","handleJobTypeChange","event","selectedValue","target","includes","filter","handleCloseDialog","handleDescriptionChange","handleStatusChange","checked","handleCityChange","selectedNames","selectedIds","city","name","map","id","selectedId","length","handleUnderChange","under","unders","handleWorkingUnderChange","setUnder","regions","setRegions","cities","setCities","selectedRegion","setSelectedRegion","selectedCities","setSelectedCities","apiData","setApiData","apiUrl","get","then","response","transformedData","data","region","regionId","region_id","cityId","city_id","catch","error","handleRegionChange","selectedRegionData","find","handleCityChange1","selectedIdsSet","Set","forEach","add","Array","from","handleSave","e","preventDefault","formData","FormData","append","post","headers","selectedSizes","setSelectedSizes","children","direction","alignItems","justifyContent","mb","variant","gutterBottom","sx","width","p","spacing","fullWidth","onChange","multiple","renderValue","selected","join","primary","multiline","rows","mt","px","pt","jobType","control","color","autoFocus","paddingBottom","onClick"],"sources":["D:/ArlTech/ChaturdhaAdmin/src/pages/CreateJobPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport {api} from \"../Api/Api\"\r\nimport {\r\n    Card,\r\n    Stack,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Typography,\r\n    Select, MenuItem,\r\n    FormControl, InputLabel,\r\n    ListItemText,\r\n    CardContent,\r\n    Grid\r\n} from '@mui/material';\r\n// import { Tree, TreeNode } from 'react-organizational-chart';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function CreateJobPage(props) {\r\n    const [cityData, setCityData] = useState([]);\r\n    const [selectedCity, setSelectedCity] = useState([]);\r\n   \r\n    const [selectedUnder, setSelectedUnder] = useState([]);\r\n\r\n    const [selectedCityId, setSelectedCityId] = useState([]);\r\n\r\n    const [selectedRegionId, setSelectedRegionId] = useState([]);\r\n\r\n\r\n    const [selectedCitiesId, setSelectedCitiesId] = useState([]);\r\n\r\n    const [selectedUnderId, setSelectedUnderId] = useState([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n\r\n    console.log(selectedCity)\r\n    \r\n    const [jobTitle, setJobTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    \r\n    const [selectedJobTypes, setSelectedJobTypes] = useState([]);\r\n\r\n    const[experience,setExperience]=useState('');\r\n    const [salary, setSalary] = useState('');\r\n    const [workingUnder, setWorkingUnder] = useState([]);\r\n\r\n    const [status, setStatus] = useState(false);\r\n    const [jobRoles, setJobRoles] = useState([]);\r\n    const [newParameter, setNewParameter] = useState('');\r\n    \r\n\r\n    const JOB_TYPE_CHOICES = [\r\n        { value: 'full-time', label: 'Full-Time' },\r\n        { value: 'part-time', label: 'Part-Time' },\r\n        { value: 'wfh', label: 'WFH' },\r\n      ];\r\n\r\n     \r\n  const handleJobTypeChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    if (selectedJobTypes.includes(selectedValue)) {\r\n      // Deselect the option\r\n      setSelectedJobTypes(selectedJobTypes.filter((value) => value !== selectedValue));\r\n    } else {\r\n      // Select the option\r\n      setSelectedJobTypes([...selectedJobTypes, selectedValue]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleCloseDialog = () => {\r\n    // Close the dialog\r\n    setOpenDialog(false);\r\n  };\r\n\r\n    const handleDescriptionChange = (event) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    const handleStatusChange = (event) => {\r\n        setStatus(event.target.checked);\r\n    };\r\n\r\n    const handleCityChange = (event) => {\r\n        const selectedNames = event.target.value;\r\n        setSelectedCity(selectedNames);\r\n      \r\n        // Log the corresponding IDs for selected names\r\n        const selectedIds = cityData\r\n          .filter((city) => selectedNames.includes(city.name))\r\n          .map((city) => city.id);\r\n      \r\n        // Update the selectedCity state with the IDs\r\n        const selectedId = selectedIds.length > 0 ? selectedIds[0] : 1;\r\n        setSelectedCityId(selectedId);\r\n        console.log(selectedId);\r\n      };\r\n\r\n      \r\n      const handleUnderChange = (event) => {\r\n        const selectedNames = event.target.value;\r\n        setSelectedUnder(selectedNames);\r\n       \r\n      \r\n        // Log the corresponding IDs for selected names\r\n        const selectedIds = under\r\n          .filter((unders) => selectedNames.includes(unders.name))\r\n          .map((unders) => unders.id);\r\n      \r\n        \r\n        setSelectedUnderId(selectedIds);\r\n      \r\n      };\r\n\r\n    const handleWorkingUnderChange = (event) => {\r\n        setUnder(event.target.value);\r\n    };\r\n\r\n\r\n    const [regions, setRegions] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [selectedRegion, setSelectedRegion] = useState('');\r\n    const [selectedCities, setSelectedCities] = useState([]);\r\n\r\n    const [apiData, setApiData] = useState([]);\r\n\r\n    // Fetch the API data on component mount\r\n    useEffect(() => {\r\n      \r\n      const apiUrl = 'api/marketplace/nested_areas/';\r\n  \r\n      api.get(apiUrl)\r\n        .then((response) => {\r\n          // Transform the response data to include IDs\r\n          const transformedData = response.data.map(region => ({\r\n            regionId: region.region_id, // Replace with your actual key for region ID\r\n            region: region.region,\r\n            cities: region.cities.map(city => ({\r\n              cityId: city.city_id, // Replace with your actual key for city ID\r\n              name: city.name,\r\n            })),\r\n          }));\r\n  \r\n          setApiData(transformedData);\r\n          console.log(transformedData);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n        });\r\n    }, []);\r\n  \r\n  \r\n    useEffect(() => {\r\n      console.log(\"regionId\", selectedRegion);\r\n    }, [selectedRegion]);\r\n    useEffect(() => {\r\n      \r\n    }, [selectedCityId]);\r\n  \r\n   \r\n  const handleRegionChange = (event) => {\r\n    const regionId = event.target.value;\r\n    setSelectedRegion(regionId)\r\n   \r\n    \r\n\r\n    // Find the selected region from the apiData\r\n    const selectedRegionData = apiData.find((data) => data.regionId === regionId);\r\n\r\n    // Set the available cities for the selected region\r\n    setCities(selectedRegionData ? selectedRegionData.cities : []);\r\n    setSelectedCities([]);\r\n  };\r\n\r\n  const handleCityChange1 = (event) => {\r\n    const selectedNames = event.target.value;\r\n  \r\n    // Create a Set to ensure unique city IDs\r\n    const selectedIdsSet = new Set();\r\n  \r\n    // Loop through the regions and city_info to find IDs based on selected names\r\n    apiData.forEach((data) => {\r\n      if (data.regionId === selectedRegion) {\r\n        data.cities.forEach((city) => {\r\n          if (selectedNames.includes(city.name)) {\r\n            selectedIdsSet.add(city.cityId);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  \r\n    // Convert the Set back to an array\r\n    const selectedIds = Array.from(selectedIdsSet);\r\n  \r\n    setSelectedCities(selectedNames);\r\n    setSelectedCityId(selectedIds); // Update selectedCityId\r\n   \r\n  };\r\n  \r\n  \r\n    \r\n    const[under,setUnder]=useState([])\r\n    \r\n    useEffect(() => {\r\n        const apiUrl = 'api/employee/jobrole/';\r\n    \r\n        api.get(apiUrl)\r\n          .then((response) => {\r\n            // Handle the response data here\r\n            setUnder(response.data);\r\n            console.log(response.data)\r\n          \r\n          })\r\n          .catch((error) => {\r\n            // Handle any errors that occurred during the request\r\n            console.error('Error:', error);\r\n          });\r\n      }, []);\r\n\r\n\r\n      console.log(\"cityNew\",selectedCityId)\r\n\r\n    const handleSave = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        const formData = new FormData();\r\n        formData.append('name', jobTitle);\r\n        formData.append('job_description', description);\r\n        formData.append('experience', experience);\r\n        formData.append('salary_package', salary);\r\n        formData.append('working_under', selectedUnderId || null); \r\n        formData.append('job_type', selectedJobTypes); // Set your default job type as needed\r\n        formData.append('city',  selectedCityId);\r\n        formData.append('region',selectedRegion );\r\n\r\n      \r\n        try {\r\n          const response = await api.post('api/employee/jobrole/', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n            },\r\n          });\r\n      \r\n          // Handle the success response, e.g., show a success message or redirect\r\n       \r\n      \r\n          // Clear or reset the form fields by updating the state variables\r\n          setJobTitle('');\r\n          setDescription('');\r\n          setExperience('');\r\n          setSalary(''); \r\n          setSelectedCity([]);\r\n          setWorkingUnder([]);\r\n          setSelectedJobTypes([]);\r\n          setSelectedCityId([]);\r\n          setSelectedUnder([])\r\n          setSelectedRegionId([])\r\n          \r\n          setOpenDialog(true);\r\n          \r\n      \r\n        } catch (error) {\r\n          // Handle any errors that occurred during the POST request\r\n          console.error('Error:', error);\r\n        }\r\n      };\r\n      \r\n\r\n    const [selectedSizes, setSelectedSizes] = useState([]);\r\n\r\n   \r\n\r\n    return (\r\n        <Container>\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Create New Job Role For Arl-Tech\r\n                </Typography>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Details :\r\n                </Typography>\r\n\r\n                <Card sx={{ width: '75%' }}>\r\n                    <Stack spacing={3} p={4}>\r\n                        <FormControl fullWidth variant=\"outlined\">\r\n                            <InputLabel>Select Region</InputLabel>\r\n                            <Select\r\n        label=\"Select Region\"\r\n        value={selectedRegion}\r\n        onChange={handleRegionChange}\r\n      >\r\n        {apiData.map(data => (\r\n          <MenuItem key={data.regionId} value={data.regionId}>\r\n            {data.region}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      \r\n      {selectedRegion && (\r\n        <Select\r\n          multiple\r\n          label=\"Select Cities\"\r\n          value={selectedCities}\r\n          onChange={handleCityChange1}\r\n          renderValue={(selected) => selected.join(', ')}\r\n        >\r\n          {cities.map(city => (\r\n            <MenuItem key={city.cityId} value={city.name}> {/* Use city.id as the value */}\r\n              <Checkbox checked={selectedCities.includes(city.name)} />\r\n              <ListItemText primary={city.name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      )}\r\n                        </FormControl>\r\n                        <TextField\r\n                            label=\"Role Title\"\r\n                            fullWidth\r\n                            //   value={productName}\r\n                            // onChange={handleProductNameChange}\r\n                            value={jobTitle}\r\n                            onChange={(e) => setJobTitle(e.target.value)}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Add Job Description\"\r\n                            fullWidth\r\n                            multiline\r\n                            rows={4}\r\n                            value={description}\r\n                            onChange={handleDescriptionChange}\r\n                        />\r\n                    </Stack>\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Properties :\r\n                </Typography>\r\n\r\n                <Card sx={{ width: '75%' }}>\r\n                    <Stack px={4} pt={4} direction=\"row\">\r\n\r\n                    {JOB_TYPE_CHOICES.map((jobType) => (\r\n        <FormControlLabel\r\n          key={jobType.value}\r\n          control={\r\n            <Checkbox\r\n              checked={selectedJobTypes.includes(jobType.value)}\r\n              onChange={handleJobTypeChange}\r\n              value={jobType.value}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={jobType.label}\r\n        />\r\n      ))}\r\n                    </Stack>\r\n                    <Stack px={4} direction=\"row\">\r\n\r\n                        <TextField\r\n                            label=\"Experience\"\r\n                            fullWidth\r\n                            //   value={productName}\r\n                            // onChange={handleProductNameChange}\r\n                            value={experience}\r\n                            onChange={(e) => setExperience(e.target.value)}\r\n                        />\r\n                    </Stack>\r\n                    <Stack p={4} >\r\n                        <TextField\r\n                            label=\"Enter Salary\"\r\n                            variant=\"outlined\"\r\n                            value={salary}\r\n                            onChange={(e) => setSalary(e.target.value)}\r\n                            fullWidth\r\n                            autoFocus\r\n                        />\r\n                    </Stack>\r\n                    <Stack px={4} paddingBottom={4}>\r\n                        <FormControl fullWidth variant=\"outlined\">\r\n                            <InputLabel>Working Under</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                label=\"Working Under\"\r\n                                value={selectedUnder}\r\n                                onChange={handleUnderChange}\r\n                                renderValue={(selected) => selected.join(', ')}\r\n                            >\r\n                                  {under.map((unders) => (\r\n     \r\n     selectedCityId === unders.id && (\r\n        <MenuItem key={unders.id} value={unders.name}>\r\n          <Checkbox checked={selectedUnder.includes(unders.name)} />\r\n          <ListItemText primary={unders.name} />\r\n        </MenuItem>\r\n      )\r\n      )\r\n    )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Stack>\r\n\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4} justifyContent={'flex-end'}>\r\n                <Button variant=\"contained\" onClick={handleSave} color='warning'>\r\n                    Create Job\r\n                </Button>\r\n            </Stack>\r\n\r\n\r\n            {/* <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Job Hierarchy :\r\n                </Typography>\r\n                <Card sx={{ width: '75%' }}>   \r\n                    <Stack spacing={3} p={4} direction=\"row\">\r\n                    <Grid xs={6}>\r\n                        {jobRoles.map((role, index) => (\r\n                            <Card variant=\"outlined\" >\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\">{role.title}</Typography>\r\n                                    <Typography variant=\"body1\">\r\n                                        City: {role.city.join(', ')}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body1\">\r\n                                        Working under: {role.workingUnder.join(', ')}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        ))}\r\n                    </Grid>\r\n                    </Stack>\r\n                </Card>\r\n            </Stack>\r\n\r\n            <Stack direction=\"row\" sx={{ width: '100%' }} mt={4}>\r\n                <Typography variant=\"h5\" gutterBottom p={4} sx={{ width: '25%' }}>\r\n                    Example Job Hierarchy :\r\n                </Typography>\r\n                <Card sx={{ width: '75%' }}>   \r\n                    <Stack spacing={3} p={4} direction=\"row\">\r\n                    \r\n                    </Stack>\r\n                </Card>\r\n            </Stack> */}\r\n\r\n        </Container>\r\n    );\r\n}\r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}